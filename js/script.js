// Generated by CoffeeScript 1.7.1
(function() {
  var Init, Mode, Slide, Transform, UserInterface, startEventSourceHandler;

  $.fn.extend({
    typewriter: function() {
      this.each(function() {
        var $el, progress, str, timer;
        $el = $(this);
        str = $el.text();
        progress = 0;
        $el.text('');
        return timer = setInterval(function() {
          $el.text(str.substring(0, progress) + '_');
          if (progress >= str.length) {
            clearInterval(timer);
            $el.text(str);
          }
          return progress++;
        }, 130);
      });
      return this;
    }
  });

  Transform = (function() {
    function Transform() {}

    Transform.body = document.body;

    Transform.get = function() {
      var denominator;
      denominator = Math.max(this.body.clientWidth / window.innerWidth, this.body.clientHeight / window.innerHeight);
      return "scale(" + (1 / denominator) + ")";
    };

    Transform.apply = function(transform) {
      this.body.style.WebkitTransform = transform;
      this.body.style.MozTransform = transform;
      this.body.style.msTransform = transform;
      this.body.style.OTransform = transform;
      return this.body.style.transform = transform;
    };

    Transform.scale = function() {
      return Transform.apply(Transform.get());
    };

    Transform.reset = function() {
      return Transform.apply('none');
    };

    return Transform;

  })();

  Mode = (function() {
    function Mode() {}

    Mode.body = document.body;

    Mode.dispatchSingleSlideMode = function(e) {
      var presentSlideId, slide, slideId;
      slideId = Mode.findSlideId(e.target);
      presentSlideId = slideId != null;
      if (presentSlideId && Mode.isListMode()) {
        Mode.enterSlideMode();
        slide = Slide.fromSlideId(slideId);
        slide.goto();
        return slide.replaceHistory();
      }
    };

    Mode.enterSlideMode = function() {
      this.body.className = "full";
      return Transform.scale();
    };

    Mode.enterListMode = function() {
      this.body.className = "list";
      return Transform.reset();
    };

    Mode.isListMode = function() {
      return !this.body.classList.contains("full");
    };

    Mode.switchToListMode = function() {
      var slide;
      Mode.enterListMode();
      slide = Slide.current();
      slide.pushHistory();
      return slide.scrollTo();
    };

    Mode.switchToSlideMode = function() {
      var slide;
      Mode.enterSlideMode();
      slide = Slide.current();
      slide.pushHistory();
      return slide.updateProgress();
    };

    Mode.reload = function() {
      var _ref;
      if (window.location.search.substr(1) === 'full') {
        return Mode.enterSlideMode();
      } else {
        Mode.enterListMode();
        return (_ref = Slide.current()) != null ? _ref.scrollTo() : void 0;
      }
    };

    Mode.findSlideId = function(node) {
      while ("BODY" !== node.nodeName && "HTML" !== node.nodeName) {
        if (node.classList.contains("slide")) {
          return node.id;
        }
        node = node.parentNode;
      }
      return null;
    };

    return Mode;

  })();

  Init = (function() {
    function Init() {}

    Init.init = function() {
      var slide, _i, _len, _ref, _results;
      _ref = $("div.slide");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slide = _ref[_i];
        Init.initIncremental(slide);
        Init.initPause(slide);
        _results.push(Init.initTypewriter(slide));
      }
      return _results;
    };

    Init.initIncremental = function(slide) {
      if ($(slide).hasClass('incremental')) {
        return $(slide).find('ul > li').addClass('inactive');
      }
    };

    Init.initPause = function(slide) {
      var i, last, pause, pauses, wrappable, _i, _len, _results;
      pauses = $(slide).find(".pause");
      _results = [];
      for (i = _i = 0, _len = pauses.length; _i < _len; i = ++_i) {
        pause = pauses[i];
        last = i === pauses.length - 1;
        if (last) {
          wrappable = $(pause).nextAll();
        } else {
          wrappable = $(pause).nextUntil(".pause");
        }
        _results.push(wrappable != null ? wrappable.wrapAll('<div class="inactive"></div>') : void 0);
      }
      return _results;
    };

    Init.initTypewriter = function(slide) {
      if ($(slide).hasClass('typewriter')) {
        return null;
      }
    };

    return Init;

  })();

  Slide = (function() {
    function Slide(slideNumber) {
      this.$element = $(this.slideList()[this.slideNumber]);
      this.slideNumber = this.normalizeSlideNumber(slideNumber);
      this.id = this.slideList()[this.slideNumber].id;
      this.progress = $(".progress div").first();
    }

    Slide.slideList = function() {
      var slide, slideList, slides, _i, _len;
      slides = $("div.slide");
      slideList = [];
      for (_i = 0, _len = slides.length; _i < _len; _i++) {
        slide = slides[_i];
        slideList.push({
          id: slide.id
        });
      }
      return slideList;
    };

    Slide.current = function() {
      var id;
      id = window.location.hash.substr(1);
      return Slide.fromSlideId(id);
    };

    Slide.fromSlideId = function(slideId) {
      var index, slide, _i, _len, _ref;
      _ref = Slide.slideList();
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        slide = _ref[index];
        if (slideId === slide.id) {
          return new Slide(index);
        }
      }
      return null;
    };

    Slide.first = function() {
      return new Slide(0);
    };

    Slide.last = function() {
      return new Slide(this.slideList().length - 1);
    };

    Slide.prototype.getHash = function() {
      return "#" + this.id;
    };

    Slide.prototype.html = function() {
      return $(this.getHash());
    };

    Slide.prototype.goto = function() {
      window.location.hash = this.getHash();
      if (!Mode.isListMode()) {
        return this.updateProgress();
      }
    };

    Slide.prototype.scrollTo = function() {
      return window.scrollTo(0, this.offsetTop());
    };

    Slide.prototype.offsetTop = function() {
      var _ref;
      return (_ref = this.html()) != null ? _ref.offset().top : void 0;
    };

    Slide.prototype.next = function() {
      return new Slide(this.slideNumber + 1);
    };

    Slide.prototype.prev = function() {
      return new Slide(this.slideNumber - 1);
    };

    Slide.prototype.pushHistory = function() {
      return history.pushState(null, null, this.historyPath());
    };

    Slide.prototype.replaceHistory = function() {
      return history.replaceState(null, null, this.historyPath());
    };

    Slide.prototype.containsInactive = function() {
      return this.firstInactiveElement().length > 0;
    };

    Slide.prototype.firstInactiveElement = function() {
      return this.html().find('.inactive').first();
    };

    Slide.prototype.removePresentElement = function() {
      return this.html().find('.present').first().removeClass('present');
    };

    Slide.prototype.nextInactive = function() {
      var element;
      element = this.firstInactiveElement();
      this.removePresentElement();
      element.removeClass('inactive').addClass('present');
      if (!this.containsInactive()) {
        return this.html().removeClass('incremental');
      }
    };

    Slide.prototype.slideList = function() {
      return Slide.slideList();
    };

    Slide.prototype.normalizeSlideNumber = function(slideNumber) {
      if (0 > slideNumber) {
        return this.slideList().length - 1;
      } else if (this.slideList().length <= slideNumber) {
        return 0;
      } else {
        return slideNumber;
      }
    };

    Slide.prototype.updateProgress = function() {
      var width;
      if (this.progress == null) {
        return;
      }
      width = (100 / (this.slideList().length - 1) * this.slideNumber).toFixed(2);
      return this.progress.width("" + width + "%");
    };

    Slide.prototype.historyPath = function() {
      var path;
      path = window.location.pathname;
      if (!Mode.isListMode()) {
        path += "?full";
      }
      path += this.getHash();
      return path;
    };

    return Slide;

  })();

  UserInterface = (function() {
    function UserInterface() {}

    return UserInterface;

  })();

  startEventSourceHandler = function(uri) {
    var source;
    if (window["EventSource"] === undefined) {
      return;
    }
    source = new EventSource(uri);
    return source.onmessage = function(e) {
      switch (e.data) {
        case "next":
          return Slide.current().next().goto();
        case "prev":
          return Slide.current().prev().goto();
        case "up":
          if (!Mode.isListMode()) {
            e.preventDefault();
            return Mode.switchToListMode();
          }
          break;
        case "down":
          if (Mode.isListMode()) {
            e.preventDefault();
            return Mode.switchToSlideMode();
          }
          break;
        default:
          return console.log(e);
      }
    };
  };

  $(function() {
    Init.init();
    window.addEventListener("DOMContentLoaded", function() {
      var slide;
      if (!Mode.isListMode()) {
        Mode.enterSlideMode();
        slide = Slide.current() || Slide.first();
        slide.replaceHistory();
        return slide.updateProgress();
      }
    }, false);
    window.addEventListener("popstate", function(e) {
      return Mode.reload();
    }, false);
    window.addEventListener("resize", function(e) {
      if (!Mode.isListMode()) {
        return Transform.scale();
      }
    }, false);
    document.addEventListener("keyup", function(e) {
      var method, slide;
      if (e.altKey || e.ctrlKey || e.metaKey) {
        return;
      }
      switch (e.which) {
        case 116:
        case 13:
          if (Mode.isListMode() && (Slide.current() != null)) {
            e.preventDefault();
            return Mode.switchToSlideMode();
          }
          break;
        case 27:
          if (!Mode.isListMode()) {
            e.preventDefault();
            return Mode.switchToListMode();
          }
          break;
        case 33:
        case 38:
        case 37:
        case 72:
        case 75:
          e.preventDefault();
          return Slide.current().prev().goto();
        case 34:
        case 40:
        case 39:
        case 76:
        case 74:
          e.preventDefault();
          slide = Slide.current();
          if (slide.containsInactive()) {
            return slide.nextInactive();
          } else {
            slide.removePresentElement();
            return slide.next().goto();
          }
          break;
        case 36:
          e.preventDefault();
          return Slide.first().goto();
        case 35:
          e.preventDefault();
          return Slide.last().goto();
        case 9:
        case 32:
          e.preventDefault();
          method = e.shiftKey ? 'prev' : 'next';
          return Slide.current[method]().goto();
      }
    }, false);
    document.addEventListener("click", Mode.dispatchSingleSlideMode, false);
    document.addEventListener("touchend", Mode.dispatchSingleSlideMode, false);
    document.addEventListener("touchstart", function(e) {
      var method, x;
      if (!Mode.isListMode()) {
        x = e.touches[0].pageX;
        method = x > window.innerWidth / 2 ? 'next' : 'prev';
        return Slide.current()[method]().goto();
      }
    }, false);
    document.addEventListener("touchmove", function(e) {
      if (!Mode.isListMode()) {
        return e.preventDefault();
      }
    }, false);
    return window.setTimeout(function() {
      return startEventSourceHandler("/remote/sub/events");
    }, 100);
  });

}).call(this);
